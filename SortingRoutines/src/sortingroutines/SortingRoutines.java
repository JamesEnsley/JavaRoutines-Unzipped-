/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package sortingroutines;

import java.util.Random;
import java.util.Arrays;
import java.text.*;
import java.math.*;
import java.util.regex.*;



/**
 * Programmer: James Ensley
 * Date: November 29th, 2020
 * Program Name: SortingRoutines
 * Program Description: Generates random numbers and saves them to an array, the user is allowed to pick
 * the algorithm and the order the array is sorted by, and also how many numbers are in the array
 */

public class SortingRoutines extends javax.swing.JFrame {

    /**
     * Creates new form SortingRoutines
     */
    public SortingRoutines() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        sortingAlgorithmButtonGroup = new javax.swing.ButtonGroup();
        sortingOrderButtonGroup = new javax.swing.ButtonGroup();
        title = new javax.swing.JLabel();
        titleEnter = new javax.swing.JLabel();
        titleSortingAlgorithm = new javax.swing.JLabel();
        selectionButton = new javax.swing.JRadioButton();
        bubbleButton = new javax.swing.JRadioButton();
        insertionButton = new javax.swing.JRadioButton();
        quickButton = new javax.swing.JRadioButton();
        titleSortingOrder = new javax.swing.JLabel();
        ascendingButton = new javax.swing.JRadioButton();
        descendingButton = new javax.swing.JRadioButton();
        titleAmount = new javax.swing.JLabel();
        inputAmount = new javax.swing.JTextField();
        sortButton = new javax.swing.JButton();
        titleOriginalNumbers = new javax.swing.JLabel();
        titleSortedNumbers = new javax.swing.JLabel();
        originalNumbersTextArea = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        sortedNumbersTextArea = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        title.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        title.setText("Sorting Routines");

        titleEnter.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        titleEnter.setText("Enter the following information:");

        titleSortingAlgorithm.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        titleSortingAlgorithm.setText("Sorting Algorithm");

        sortingAlgorithmButtonGroup.add(selectionButton);
        selectionButton.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        selectionButton.setText("Selection");
        selectionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectionButtonActionPerformed(evt);
            }
        });

        sortingAlgorithmButtonGroup.add(bubbleButton);
        bubbleButton.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        bubbleButton.setText("Bubble");
        bubbleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bubbleButtonActionPerformed(evt);
            }
        });

        sortingAlgorithmButtonGroup.add(insertionButton);
        insertionButton.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        insertionButton.setText("Insertion");
        insertionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                insertionButtonActionPerformed(evt);
            }
        });

        sortingAlgorithmButtonGroup.add(quickButton);
        quickButton.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        quickButton.setText("Quick");
        quickButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quickButtonActionPerformed(evt);
            }
        });

        titleSortingOrder.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        titleSortingOrder.setText("Sorting Order");

        sortingOrderButtonGroup.add(ascendingButton);
        ascendingButton.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        ascendingButton.setText("Ascending");
        ascendingButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ascendingButtonActionPerformed(evt);
            }
        });

        sortingOrderButtonGroup.add(descendingButton);
        descendingButton.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        descendingButton.setText("Descending");
        descendingButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                descendingButtonActionPerformed(evt);
            }
        });

        titleAmount.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        titleAmount.setText("Amount of Numbers to Sort:");

        inputAmount.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        sortButton.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        sortButton.setText("Sort Numbers");
        sortButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sortButtonActionPerformed(evt);
            }
        });

        titleOriginalNumbers.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        titleOriginalNumbers.setText("Original Numbers");

        titleSortedNumbers.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        titleSortedNumbers.setText("Sorted Numbers");

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        originalNumbersTextArea.setViewportView(jTextArea1);

        jTextArea2.setColumns(20);
        jTextArea2.setRows(5);
        sortedNumbersTextArea.setViewportView(jTextArea2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(223, 223, 223)
                        .addComponent(title))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(titleEnter))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(titleSortingAlgorithm)
                                            .addGap(18, 18, 18)
                                            .addComponent(selectionButton))
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(quickButton)
                                            .addComponent(insertionButton)
                                            .addComponent(bubbleButton)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(14, 14, 14)
                                        .addComponent(titleAmount)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(inputAmount, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(20, 20, 20)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(titleOriginalNumbers)
                                    .addComponent(originalNumbersTextArea, javax.swing.GroupLayout.PREFERRED_SIZE, 226, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(66, 66, 66)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(sortedNumbersTextArea, javax.swing.GroupLayout.PREFERRED_SIZE, 226, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(17, 17, 17)
                                .addComponent(titleSortingOrder)
                                .addGap(5, 5, 5)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(sortButton)
                                        .addComponent(ascendingButton, javax.swing.GroupLayout.Alignment.TRAILING))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(30, 30, 30)
                                        .addComponent(descendingButton))))
                            .addComponent(titleSortedNumbers))))
                .addContainerGap(43, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(title)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(titleEnter)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(titleSortingAlgorithm)
                    .addComponent(selectionButton)
                    .addComponent(titleSortingOrder)
                    .addComponent(ascendingButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bubbleButton)
                    .addComponent(descendingButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(insertionButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(quickButton)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(titleAmount)
                    .addComponent(inputAmount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sortButton))
                .addGap(59, 59, 59)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(titleSortedNumbers)
                    .addComponent(titleOriginalNumbers))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(originalNumbersTextArea)
                    .addComponent(sortedNumbersTextArea, javax.swing.GroupLayout.DEFAULT_SIZE, 273, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
  

    private void sortButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sortButtonActionPerformed
        int inputNumbersToSort;

        inputNumbersToSort = Integer.parseInt(inputAmount.getText()); //input
        
        //clears textarea
        jTextArea1.setText(""); 
        jTextArea2.setText("");
        
        //initializes random arrays
        int randomList1 [] = new int[inputNumbersToSort]; //selection sorts random array
        int randomList2 [] = new int[inputNumbersToSort]; //bubble sorts random array
        int randomList3 [] = new int[inputNumbersToSort]; //insertion sorts random array
        int randomList4 [] = new int[inputNumbersToSort]; //quick sorts random array
        //initializes sorted array
        int sortedList [] = new int[inputNumbersToSort];
        
        //randomizes an array of numbers
        for (int i = 0; i < inputNumbersToSort; i++){
            Random r = new Random();
            randomList1[i] = r.nextInt((2000)+1)-1000; //4 seperate arrays because otherwise the algorithms 
            randomList2[i] = r.nextInt((2000)+1)-1000; //would sort already sorted arrays
            randomList3[i] = r.nextInt((2000)+1)-1000;
            randomList4[i] = r.nextInt((2000)+1)-1000;
            jTextArea1.append(Integer.toString(randomList1[i])+ "\n"); //outputs to original numbers
        }
        
        //if selection sort is selected
        if (selectionButton.isSelected() == true){
           sortedList = selectionSort(randomList1); //sorts the randomized array using selection sort algorithm
           //lists sorted array
           if (ascendingButton.isSelected() == true){ //if ascending order is selected
             for (int k = 0; k < inputNumbersToSort;k++){
               jTextArea2.append(Integer.toString(sortedList[k])+ "\n"); //outputs to sorted numbers
             }
           } else { //if descending order is selected
             for (int j = inputNumbersToSort-1; j >= 0;j--){
               jTextArea2.append(Integer.toString(sortedList[j])+ "\n"); //outputs to sorted numbers
             }
           }
        }
        
        //if bubble sort is selected
        if (bubbleButton.isSelected() == true){
            sortedList = bubbleSort(randomList2); //sorts the randomized array using bubble sort algorithm
            //lists sorted array
           if (ascendingButton.isSelected() == true){ //if ascending order is selected
              for (int k = 0; k < inputNumbersToSort;k++){
               jTextArea2.append(Integer.toString(sortedList[k])+ "\n"); //outputs to sorted numbers
              } 
            } else { //if descending order is selected
             for (int j = inputNumbersToSort-1; j >= 0;j--){
               jTextArea2.append(Integer.toString(sortedList[j])+ "\n"); //outputs to sorted numbers
             }
            }   
        }
        
        //if insertion sort is selected
        if (insertionButton.isSelected() == true){ 
            sortedList = insertionSort(randomList3);
            if (ascendingButton.isSelected() == true){ //if ascending order is selected
              for (int k = 0; k < inputNumbersToSort;k++){
               jTextArea2.append(Integer.toString(sortedList[k])+ "\n"); //outputs to sorted numbers
              } 
            } else { //if descending order is selected
             for (int j = inputNumbersToSort-1; j >= 0;j--){
               jTextArea2.append(Integer.toString(sortedList[j])+ "\n"); //outputs to sorted numbers
             }
           }
        }
        
        //if quick sort is selected
        if (quickButton.isSelected() == true){
            sortedList = quickSortInput(randomList4);
            if (ascendingButton.isSelected() == true){ //if ascending order is selected
              for (int k = 0; k < inputNumbersToSort;k++){
               jTextArea2.append(Integer.toString(sortedList[k])+ "\n"); //outputs to sorted numbers
              } 
            } else { //if descending order is selected
             for (int j = inputNumbersToSort-1; j >= 0;j--){
               jTextArea2.append(Integer.toString(sortedList[j])+ "\n"); //outputs to sorted numbers
             }
           }
        }
                 
    }//GEN-LAST:event_sortButtonActionPerformed

 public int[] selectionSort (int[] list){ //O(n^2)
    int i, j, temp = 0; //i and j are used in for loops, temp is used to swap the minValue and minIndex
    for (i=0;i<list.length;i++){ //min values index
        for (j=i+1;j<list.length;j++){ //index of values to its right to compare
            if (list[i]>list[j]){ //if min value is greater than the value to it's right, swap
                temp = list[i]; //swaps
                list[i] = list[j];
                list[j] = temp;
            }
        }
    }
return list;
}        
    
public int[] bubbleSort (int[] list){ //O(n^2)
    boolean sw = false; //starts at false and is used for while loop
    int bottom = list.length-1; //number unsorted 
    int temp = 0; //used to swap
    
    while (sw == false){
        sw = true;
        for (int j=0;j<bottom;j++){ //goes through unsorted portion of the array
             if (list[j]>list[j+1]){ //if left value is greater than the right, move swap the values
                 temp = list[j]; //swaps
                 list[j] = list[j+1];
                 list[j+1] = temp;
                 sw = false;
             }
        }
        bottom--; //decreases the number unsorted 
    }
    return list;
}
    
public int[] insertionSort (int[] list){ //O(n^2)
    int j, temp = 0; //j used for while loop and temp is used to swap
    for (int n = 1;n<list.length;n++){ 
        temp = list[n]; //sets key value
        j = n - 1;
        while(j >= 0 && list[j] > temp){ //if j is greater than 0 and if key value is less than the value to it's left, swap
            list[j+1] = list[j]; //swaps
            j--; //moves left of the list
        }
        list[j+1] = temp; //sets the rightmost value to the key value
    }  
    return list;
}
    
public int[] quickSortInput(int[] list){ //O(n^2) worse case, average case O(n log n)
    return quickSort(list, 0, list.length-1); //used to input values
}
    
private int[]  quickSort(int[] list, int low, int high){
    if (low < high+1){ //if there is more than 1 value left to sort
        int p = partition(list,low,high); //create pivot
        quickSort(list, low, p-1); //left partition
        quickSort(list, p+1, high); //right partition
    }
    return list;
}

private void swap (int[] list, int index1, int index2){
   int temp = list[index1]; //swaps
   list[index1] = list[index2];
   list[index2] = temp;
}
    
private int getPivot (int low, int high){
    Random rand = new Random(); //generates random pivot index
    return rand.nextInt((high - low)+1) + low;
}

private int partition(int[] list, int low, int high){ //goes through each value and compares it to pivot value and swaps to the left or right of the pivot, depending if it was greater or less
    swap(list, low, getPivot(low,high)); //swaps
    int border = low + 1; //right of pivot
    for (int i = border; i <= high; i++){ //comparing each value to the pivot
        if (list[i] < list[low]){ //if value is less than pivot swap with border
            swap (list,i,border++); //swap
        }
    }
    swap(list,low,border-1); //swaps pivot back to where it was
    return border-1; //index of pivot
}

    
    
    private void selectionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectionButtonActionPerformed
    }//GEN-LAST:event_selectionButtonActionPerformed

    private void bubbleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bubbleButtonActionPerformed
    }//GEN-LAST:event_bubbleButtonActionPerformed

    private void insertionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_insertionButtonActionPerformed
    }//GEN-LAST:event_insertionButtonActionPerformed

    private void quickButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quickButtonActionPerformed
    }//GEN-LAST:event_quickButtonActionPerformed

    private void ascendingButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ascendingButtonActionPerformed
    }//GEN-LAST:event_ascendingButtonActionPerformed

    private void descendingButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_descendingButtonActionPerformed
    }//GEN-LAST:event_descendingButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
    
   
        
        
        
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SortingRoutines.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SortingRoutines.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SortingRoutines.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SortingRoutines.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SortingRoutines().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton ascendingButton;
    private javax.swing.JRadioButton bubbleButton;
    private javax.swing.JRadioButton descendingButton;
    private javax.swing.JTextField inputAmount;
    private javax.swing.JRadioButton insertionButton;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JScrollPane originalNumbersTextArea;
    private javax.swing.JRadioButton quickButton;
    private javax.swing.JRadioButton selectionButton;
    private javax.swing.JButton sortButton;
    private javax.swing.JScrollPane sortedNumbersTextArea;
    private javax.swing.ButtonGroup sortingAlgorithmButtonGroup;
    private javax.swing.ButtonGroup sortingOrderButtonGroup;
    private javax.swing.JLabel title;
    private javax.swing.JLabel titleAmount;
    private javax.swing.JLabel titleEnter;
    private javax.swing.JLabel titleOriginalNumbers;
    private javax.swing.JLabel titleSortedNumbers;
    private javax.swing.JLabel titleSortingAlgorithm;
    private javax.swing.JLabel titleSortingOrder;
    // End of variables declaration//GEN-END:variables
}
